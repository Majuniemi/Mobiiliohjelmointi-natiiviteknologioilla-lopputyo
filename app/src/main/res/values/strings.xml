<resources>
    <string name="app_name">Grade_five</string>
    <string name="course_name">Mobile programming with native technologies</string>
    <string name="info_header_1">My app uses a free API, which gives a random Chuck Norris joke as a JSON object. \n</string>
    <string name="app_description">
        <![CDATA[
        More information on the API used in the app can be found here: https://api.chucknorris.io/jokes/random\n\n
        - The app has two screens: main and info. Main screen displays a random joke and info screen has information about the app.\n\n
        - It uses Retrofit to fetch data from the API and displays it on the main screen. The app uses MVVM architecture and ViewModel class to hold the state and functionality for UI (composables).\n\n
        - The UI is simple and suitable for mobile app. The theme is modified so the app does not use default values. All the strings are saved under strings.xml file.\n\n
        - The app has implemented navigation and two screens. It uses API service and displays data retrieved from the service. The code is divided into separate files and packages.\n\n
        - Possible errors are handled, for example, if API does not return anything or there is an error, a message is displayed.\n\n
        - When data is loaded on the background, a custom spinner icon is displayed to the user on UI.\n\n
        - It also displays an image using Coil library.
        ]]>
    </string>
    <string name="requirements_header">Requirements for the app for grade 5 is as follows:\n</string>
    <string name="app_requirements">
        <![CDATA[
        - App contains some software logic. It could be, for example, performing some calculation
        or retrieving (simple) data from API (like in Todos example).
        In case API has parameters, you can hardcode them (e.g., coordinate to weather API in case you choose to do the app based on example app)\n\n
        - ViewModel class must be implemented for holding state and functionality for UI (composables)\n\n
        - UI needs to be suitable for mobile app. Modify theme (e.g., colors) so your app does not use default values.\n\n
        - All the strings should be saved under resource file.\n\n
        - Implement navigation and a simple screen (e.g., info screen). App must have at
        least two screens (main and info).\n\n
        - App must use API service and display data retrieved from the service.\n\n
        - App must implement MVVM architecture.\n\n
        - Code is divided into separate files and packages.\n\n
        - Possible errors are handled (e.g., if API does not return anything or there is an error, a message is displayed).\n\n
        - When data is loaded on the background, a message (or spinner) is displayed to the user on UI.\n\n
        App for grade 5 may contain also following features:\n
        - Displaying an image (using Coil library).
        ]]>
    </string>
    <string name="info_screen_topbar_header">Info</string>
    <string name="info_screen_menu_name">Info</string>
    <string name="topbar_app_name">Chuck Norris Jokes</string>
    <string name="image_content_description">Chuck Norris Icon</string>
    <string name="main_screen_header">Joke of the day</string>
    <string name="get_a_new_joke_button">GET A NEW JOKE</string>
    <string name="fetching_joke_error_message">Error fetching a joke</string>

</resources>